/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package view;

import controller.FuncionarioController;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.MaskFormatter;
import model.FuncionarioModel;

/**
 *
 * @author luixc
 */
public class FuncionarioView extends javax.swing.JInternalFrame {

    FuncionarioController f = new FuncionarioController();
    boolean tabelaAtiva = true;

    /**
     * Creates new form FuncionarioView
     */
    public FuncionarioView() {
        initComponents();
        carregarTabela();
        jbNovo.setEnabled(true);
        jbPesquisar.setEnabled(true);
        jbLimpar.setEnabled(true);

        jbEditar.setEnabled(false);
        jbSalvar.setEnabled(false);
        jbCancelar.setEnabled(false);
        jbEditar.setEnabled(false);
        jbExcluir.setEnabled(false);

        textCPF.setEditable(false);
        textData_nascimento.setEditable(false);
        textNome.setEditable(false);
        textSetor.setEditable(false);
        textID.setEditable(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbNovo = new javax.swing.JButton();
        jbSalvar = new javax.swing.JButton();
        jbEditar = new javax.swing.JButton();
        jbExcluir = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Tabela_funcionarios = new javax.swing.JTable();
        textNome = new javax.swing.JFormattedTextField();
        ID = new javax.swing.JLabel();
        textCPF = new javax.swing.JFormattedTextField();
        textData_nascimento = new javax.swing.JFormattedTextField();
        jbPesquisar = new javax.swing.JButton();
        jbLimpar = new javax.swing.JButton();
        jbCancelar = new javax.swing.JButton();
        textID = new javax.swing.JTextField();
        textSetor = new javax.swing.JComboBox<>();

        setClosable(true);

        jbNovo.setText("Novo");
        jbNovo.setMinimumSize(null);
        jbNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbNovoActionPerformed(evt);
            }
        });

        jbSalvar.setText("Salvar");
        jbSalvar.setMinimumSize(null);
        jbSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalvarActionPerformed(evt);
            }
        });

        jbEditar.setText("Editar");
        jbEditar.setMinimumSize(null);
        jbEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEditarActionPerformed(evt);
            }
        });

        jbExcluir.setText("Excluir");
        jbExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbExcluirActionPerformed(evt);
            }
        });

        jLabel1.setText("Nome:");

        jLabel2.setText("CPF:");

        jLabel3.setText("Data de Nascimento:");

        jLabel4.setText("Setor:");

        Tabela_funcionarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "NOME", "CPF", "IDADE", "SETOR"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Tabela_funcionarios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Tabela_funcionariosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Tabela_funcionarios);

        ID.setText("ID:");

        try {
            textCPF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        textCPF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textCPFActionPerformed(evt);
            }
        });

        try {
            textData_nascimento.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jbPesquisar.setText("Pesquisar");
        jbPesquisar.setMaximumSize(new java.awt.Dimension(72, 22));
        jbPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbPesquisarActionPerformed(evt);
            }
        });

        jbLimpar.setText("Limpar");
        jbLimpar.setMinimumSize(null);
        jbLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbLimparActionPerformed(evt);
            }
        });

        jbCancelar.setText("Cancelar");
        jbCancelar.setMaximumSize(new java.awt.Dimension(72, 22));
        jbCancelar.setMinimumSize(null);
        jbCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelarActionPerformed(evt);
            }
        });

        textSetor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Administraçâo", "Almoxarifado", "Contabilidade", "Segurança do Trabalho", "Oficina de Auto", "Moagem", "Britagem", "Forno", "Laboratorio", "Faxina", "Terceirizado", "Diretoria" }));
        textSetor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textSetorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(textNome, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(textCPF, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(ID)
                            .addComponent(textID, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textData_nascimento, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(textSetor, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jbNovo, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(6, 6, 6)
                            .addComponent(jbLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jbEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(6, 6, 6)
                            .addComponent(jbExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jbSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jbCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(37, 37, 37)
                            .addComponent(jbPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 602, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbNovo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbEditar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbExcluir))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ID, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(textNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(textCPF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(textData_nascimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textSetor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbNovoActionPerformed
        limparCampos();
        carregarTabela();
        ativarEdicao();
        jbLimpar.setEnabled(true);
        textID.setEditable(false);//e necessario deixa o Id desabilitado poque quando ele chama ativarEdicao ele vem com ele ativado por padrao. 
        jbPesquisar.setEnabled(false);//e necessario deixa desabilitado porue ele fica abilitado quando esta fazendo o cadastro e se voce  se clicar nele enquanto faz o cadastro ele da erro .
    }//GEN-LAST:event_jbNovoActionPerformed

    private void jbSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalvarActionPerformed

        FuncionarioModel funcionario = new FuncionarioModel();
        String nome = textNome.getText();
        String cpf = textCPF.getText();
        String data_nascimento = textData_nascimento.getText();

        String dataSemMascara = data_nascimento.replaceAll("[^0-9]", "");
        String cpfSemMascara = cpf.replaceAll("[^0-9]", "");

        if (nome.isEmpty() || cpfSemMascara.isEmpty() || dataSemMascara.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, prencha todos os campos solicitados.");
        } else if ("".equals(textID.getText().trim())) {
            funcionario.setNome(textNome.getText());
            funcionario.setSetor((String) textSetor.getSelectedItem());
            funcionario.setCPF(textCPF.getText());
            funcionario.setData_nascimento(textData_nascimento.getText());

            if (FuncionarioController.inserir(funcionario)) {
                JOptionPane.showMessageDialog(this, "Cadastro realizado com sucesso.");
                carregarTabela();

            } else {
                JOptionPane.showMessageDialog(this, "Falha no cadastro.");
                carregarTabela();
            }

        } else {
            funcionario.setId(Integer.parseInt(textID.getText().trim()));
            funcionario.setNome(textNome.getText());
            funcionario.setSetor((String) textSetor.getSelectedItem());
            funcionario.setCPF(textCPF.getText());
            funcionario.setData_nascimento(textData_nascimento.getText());

            if (FuncionarioController.editar(funcionario)) {
                JOptionPane.showMessageDialog(this, "O cadastro do funcionario foi atualizado com sucesso.");
            } else {
                JOptionPane.showMessageDialog(this, "Erro ao atualizar o Cadastro.");
            }
        }

        resetTela();
        carregarTabela();
        limparCampos();
    }//GEN-LAST:event_jbSalvarActionPerformed

    public void ativarEdicao() {
        //Desabilita os botões Novo, Editar, Excluir e Limpar
        jbNovo.setEnabled(false);
        jbEditar.setEnabled(false);
        jbExcluir.setEnabled(false);
        jbLimpar.setEnabled(false);

        //Habilita o botão Salvar e Cancelar e os campos de texto
        jbSalvar.setEnabled(true);
        jbCancelar.setEnabled(true);

        textNome.setEditable(true);
        textData_nascimento.setEditable(true);
        textSetor.setEditable(true);
        textCPF.setEditable(true);

        //Altera o status da flag que ativa o evento de clique na tabela para false
        tabelaAtiva = false;
    }

    public void resetTela() {
        //Ativa os botões Novo e Limpar e o campo Id para poder pesquisar quando quiser 
        textID.setEditable(false);
        jbNovo.setEnabled(true);
        jbLimpar.setEnabled(true);
        jbPesquisar.setEnabled(true);

        //Desativa os outros botões e campos de texto
        jbEditar.setEnabled(false);
        jbSalvar.setEnabled(false);
        jbCancelar.setEnabled(false);
        jbExcluir.setEnabled(false);

        textCPF.setEditable(false);
        textData_nascimento.setEditable(false);
        textNome.setEditable(false);
        textSetor.setEditable(false);

        //Esvazia todos os campos de texto
        limparCampos();

        //Recarrega a tabela
        carregarTabela();
        //Altera o status da flag que ativa o evento de clique na tabela para true
        tabelaAtiva = true;

    }

    public void carregarTabela() {

        ArrayList<FuncionarioModel> funcionarios = f.selecionarTodos();
        DefaultTableModel modelo = (DefaultTableModel) Tabela_funcionarios.getModel();
        modelo.setRowCount(0);

        for (int i = 0; i < funcionarios.size(); i++) {
            modelo.addRow(new String[]{
                String.valueOf(funcionarios.get(i).getId()),
                funcionarios.get(i).getNome(),
                funcionarios.get(i).getCPF(),
                funcionarios.get(i).getData_nascimento(),
                funcionarios.get(i).getSetor()
            });
        }
    }


    private void jbEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEditarActionPerformed

        String nome = textNome.getText();
        String cpf = textCPF.getText();
        String data_nascimento = textData_nascimento.getText();

        String dataSemMascara = data_nascimento.replaceAll("[^0-9]", "");
        String cpfSemMascara = cpf.replaceAll("[^0-9]", "");

        if (nome.isEmpty() || cpfSemMascara.isEmpty() || dataSemMascara.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Não a nada para ser editado ");
        } else {
            carregarTabela();
            ativarEdicao();

        }


    }//GEN-LAST:event_jbEditarActionPerformed

    private void jbExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbExcluirActionPerformed

        String nome = textNome.getText();
        String cpf = textCPF.getText();
        String data_nascimento = textData_nascimento.getText();
        String setor = (String) textSetor.getSelectedItem();

        String dataSemMascara = data_nascimento.replaceAll("[^0-9]", "");
        String cpfSemMascara = cpf.replaceAll("[^0-9]", "");

        if (nome.isEmpty() || setor.isEmpty() && cpfSemMascara.isEmpty() || dataSemMascara.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Não há nada para ser excluído.");

        } else if (JOptionPane.showConfirmDialog(null, "Tem certeza de que deseja excluir esse Cadastro ?", "Confirmação", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            JOptionPane.showMessageDialog(this, "Funcionário apagado com sucesso.");

            FuncionarioModel funcionario = new FuncionarioModel();
            funcionario.setId(Integer.parseInt(textID.getText()));

            resetTela();
            limparCampos();

            FuncionarioController.excluir(funcionario);

        } else if (JOptionPane.CLOSED_OPTION == JOptionPane.CLOSED_OPTION) {
            JOptionPane.showMessageDialog(this, "Operação cancelada.");
            limparCampos();
            resetTela();

        }

        carregarTabela();
    }//GEN-LAST:event_jbExcluirActionPerformed


    private void jbPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbPesquisarActionPerformed
        FuncionarioModel funcionario = new FuncionarioModel();
        String[] opcoesBusca = {"ID", "Nome", "Setor", "Data de Nascimento", "CPF"};
        int escolha = JOptionPane.showOptionDialog(this, "Escolha o tipo de busca", "Busca por",
                JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null,
                opcoesBusca, opcoesBusca[0]);

        if (escolha >= 0) { // se o usuário selecionou uma opção
            String opcaoBusca = opcoesBusca[escolha];
            String valorBusca = textID.getText();

            switch (opcaoBusca) {
                case "ID":
                    String inputValue = JOptionPane.showInputDialog(this, " Por favor insira o ID").trim();

                    if (inputValue.isEmpty()) {// o campo que o usuario digitou esta vazio ou tem algo escrito nele ?
                        JOptionPane.showMessageDialog(this, "Por Favor preencher o campo ID.");

                    } else 
                        try {
                        int id = Integer.parseInt(inputValue);
                        int numero = Integer.parseInt(inputValue.trim()); // tenta converter o texto em um número inteiro positivo

                        if (numero > 0) {
                            funcionario.setId(id);// passa o numero coletado para o bd 
                            FuncionarioModel funcionario_encontrado = FuncionarioController.selecionarID(funcionario);
                            if (funcionario_encontrado == null) {
                                limparCampos();
                                JOptionPane.showMessageDialog(this, "Funcionario não encontrado no banco de dados");
                            } else {
                                textID.setText(Integer.toString(funcionario_encontrado.getId()));
                                textNome.setText(funcionario_encontrado.getNome());
                                textCPF.setText(funcionario_encontrado.getCPF());
                                textData_nascimento.setText(funcionario_encontrado.getData_nascimento());
                                textSetor.setSelectedItem(funcionario_encontrado.getSetor());

                                //Habilita os botões Editar e Excluir
                                jbEditar.setEnabled(true);
                                jbExcluir.setEnabled(true);
                                jbSalvar.setEnabled(false);
                                jbLimpar.setEnabled(false);
                                jbNovo.setEnabled(false);

                                textID.setEnabled(true);
                                jbCancelar.setEnabled(true);

                                textNome.setEnabled(true);
                                textSetor.setEnabled(true);
                                textData_nascimento.setEnabled(true);
                                textCPF.setEnabled(true);

                                textCPF.setEditable(false);
                                textData_nascimento.setEditable(false);
                                textNome.setEditable(false);
                                textSetor.setEditable(false);
                            }
                        } else {
                            JOptionPane.showMessageDialog(this, "O numero digitado não é valido.");
                        }

                    } catch (NumberFormatException e) {
                        JOptionPane.showMessageDialog(this, "O campo ID deve conter apenas numeros.");
                    }

                    break;

                case "CPF": {

                    String CpfBusca = JOptionPane.showInputDialog(null, "Por favor insira o CPF").trim();
                    if (CpfBusca.length() != 11) {
                        JOptionPane.showMessageDialog(null, "O CPF deve conter exatamente 11 caracteres.");
                        // Aqui você pode chamar uma função para lidar com a entrada inválida ou simplesmente encerrar a execução do código.
                        return;
                    }

                    if (CpfBusca.isEmpty()) {// o campo que o usuario digitou esta vazio ou tem algo escrito nele ?
                        JOptionPane.showMessageDialog(this, "Por Favor preencher o campo de CPF.");

                    } else if (CpfBusca != null) {
                        char c = CpfBusca.charAt(0);

                        if (Character.isDigit(c)) {//o usuari digitou um numero 

                            int pw = Integer.parseInt(CpfBusca.trim()); // tenta converter o texto em um número inteiro positivo

                            if (pw > 0) {
                                funcionario.setCPF(CpfBusca);// passa o numero coletado para o bd 
                                FuncionarioModel funcionario_encontrado = FuncionarioController.selecionarCPF(funcionario);
                                if (funcionario_encontrado == null) {
                                    limparCampos();
                                    JOptionPane.showMessageDialog(this, "Funcionario não encontrado no banco de dados");
                                } else {
                                    textID.setText(Integer.toString(funcionario_encontrado.getId()));
                                    textNome.setText(funcionario_encontrado.getNome());
                                    textCPF.setText(funcionario_encontrado.getCPF());
                                    textData_nascimento.setText(funcionario_encontrado.getData_nascimento());
                                    textSetor.setSelectedItem(funcionario_encontrado.getSetor());

                                    //Habilita os botões Editar e Excluir
                                    jbEditar.setEnabled(true);
                                    jbExcluir.setEnabled(true);
                                    jbSalvar.setEnabled(false);
                                    jbLimpar.setEnabled(false);
                                    jbNovo.setEnabled(false);

                                    textID.setEnabled(true);
                                    jbCancelar.setEnabled(true);

                                    textNome.setEnabled(true);
                                    textSetor.setEnabled(true);
                                    textData_nascimento.setEnabled(true);
                                    textCPF.setEnabled(true);

                                    textCPF.setEditable(false);
                                    textData_nascimento.setEditable(false);
                                    textNome.setEditable(false);
                                    textSetor.setEditable(false);
                                }
                            } else {
                                JOptionPane.showMessageDialog(this, "O numero digitado não é valido.");
                            }

                        } else if (Character.isLetter(c)) {// o usuario digitou uma letra
                            JOptionPane.showMessageDialog(this, "O campo CPF deve ser inserio apenas numeros ");
                        } else {// o usuario digitou um caracter que nao e letra nem numero
                            JOptionPane.showMessageDialog(this, "O campo CPF não pode ser \n inserido caracters especiais ");
                        }

                    }
                }
                break;

                case "Nome":
                    String BuscarNome = JOptionPane.showInputDialog(this, " Por favor insira o Nome.").trim();

                    if (BuscarNome.isEmpty()) {// o campo que o usuario digitou esta vazio ou tem algo escrito nele ?
                        JOptionPane.showMessageDialog(this, "Por Favor preencher o campo Nome.");

                    } else if (BuscarNome.matches("[a-zA-Z]+")) {//verificar se tem apenas letra no campo
                        funcionario.setNome(BuscarNome);// passa o nome coletado para o bd 
                        List<FuncionarioModel> funcionario_encontrado = FuncionarioController.selecionarNome(funcionario);
                        if (funcionario_encontrado.isEmpty()) {
                            limparCampos();
                            JOptionPane.showMessageDialog(this, "Funcionario não encontrado no banco de dados");
                        } else {

                            DefaultTableModel model = (DefaultTableModel) Tabela_funcionarios.getModel();
                            model.setRowCount(0);
                            List<FuncionarioModel> funcionariosEncontrados = FuncionarioController.selecionarNome(funcionario);
                            for (FuncionarioModel funcionarioEncontrado : funcionariosEncontrados) {
                                model.addRow(new Object[]{
                                    funcionarioEncontrado.getId(),
                                    funcionarioEncontrado.getNome(),
                                    funcionarioEncontrado.getCPF(),
                                    funcionarioEncontrado.getData_nascimento(),
                                    funcionarioEncontrado.getSetor()
                                });
                            }
                            //Habilita os botões Editar e Excluir
                            jbEditar.setEnabled(true);
                            jbExcluir.setEnabled(true);
                            jbSalvar.setEnabled(false);
                            jbLimpar.setEnabled(false);
                            jbNovo.setEnabled(false);

                            textID.setEnabled(true);
                            jbCancelar.setEnabled(true);

                            textNome.setEnabled(true);
                            textSetor.setEnabled(true);
                            textData_nascimento.setEnabled(true);
                            textCPF.setEnabled(true);

                            textCPF.setEditable(false);
                            textData_nascimento.setEditable(false);
                            textNome.setEditable(false);
                            textSetor.setEditable(false);
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "O Nome digitado não é valido.");
                    }

                    break;

                case "Setor":

                    String BuscarSetor = JOptionPane.showInputDialog(this, "Por favor informe o Setor.").trim();

                    if (BuscarSetor.isEmpty()) {// o campo que o usuario digitou esta vazio ou tem algo escrito nele ?
                        JOptionPane.showMessageDialog(this, "Por favor preencher o campo Nome.");
                    } else if (BuscarSetor.matches("[a-zA-ZçÇáÁéÉíÍóÓúÚâÂêÊôÔûÛãÃõÕàÀèÈìÌòÒùÙ]+")) {//verificar se tem apenas letras e caracteres especiais no campo
                        funcionario.setSetor(BuscarSetor);// passa o nome coletado para o bd 
                        List<FuncionarioModel> funcionario_encontrado = FuncionarioController.selecionarSetor(funcionario);
                        if (funcionario_encontrado.isEmpty()) {
                            limparCampos();
                            JOptionPane.showMessageDialog(this, "Não existe cadastro nesse Setor.");
                        } else {

                            DefaultTableModel model = (DefaultTableModel) Tabela_funcionarios.getModel();
                            model.setRowCount(0);
                            List<FuncionarioModel> funcionariosEncontrados = FuncionarioController.selecionarSetor(funcionario);
                            for (FuncionarioModel funcionarioEncontrado : funcionariosEncontrados) {
                                model.addRow(new Object[]{
                                    funcionarioEncontrado.getId(),
                                    funcionarioEncontrado.getNome(),
                                    funcionarioEncontrado.getCPF(),
                                    funcionarioEncontrado.getData_nascimento(),
                                    funcionarioEncontrado.getSetor()
                                });
                            }
                            JOptionPane.showMessageDialog(this, "Cadastros Encontrados");
                            // Habilita os botões Editar e Excluir
                            jbEditar.setEnabled(true);
                            jbExcluir.setEnabled(true);
                            jbSalvar.setEnabled(false);
                            jbLimpar.setEnabled(false);
                            jbNovo.setEnabled(false);

                            textID.setEnabled(true);
                            jbCancelar.setEnabled(true);

                            textNome.setEnabled(true);
                            textSetor.setEnabled(true);
                            textData_nascimento.setEnabled(true);
                            textCPF.setEnabled(true);

                            textCPF.setEditable(false);
                            textData_nascimento.setEditable(false);
                            textNome.setEditable(false);
                            textSetor.setEditable(false);

                        }

                    } else {
                        JOptionPane.showMessageDialog(this, "O Nome digitado não é válido.");
                    }

                    break;

                case "Data de Nascimento":
                    // implemente a lógica para buscar pela data de nascimento
                    break;
            }
        }
    }//GEN-LAST:event_jbPesquisarActionPerformed

    private void jbLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbLimparActionPerformed
        limparCampos();
    }//GEN-LAST:event_jbLimparActionPerformed

    private void jbCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelarActionPerformed
        resetTela();
    }//GEN-LAST:event_jbCancelarActionPerformed

    private void textCPFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textCPFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textCPFActionPerformed

    private void Tabela_funcionariosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Tabela_funcionariosMouseClicked

        if (tabelaAtiva == true) {
            int linha = Tabela_funcionarios.getSelectedRow();
            DefaultTableModel modelo = (DefaultTableModel) Tabela_funcionarios.getModel();

            textID.setText((modelo.getValueAt(linha, 0)).toString());
            textNome.setText((modelo.getValueAt(linha, 1)).toString());
            textCPF.setText((modelo.getValueAt(linha, 2)).toString());
            textData_nascimento.setText((modelo.getValueAt(linha, 3)).toString());
            textSetor.setSelectedItem((modelo.getValueAt(linha, 4)).toString());

            jbEditar.setEnabled(true);
            jbExcluir.setEnabled(true);
            jbLimpar.setEnabled(false);
            jbCancelar.setEnabled(true);
        }


    }//GEN-LAST:event_Tabela_funcionariosMouseClicked

    private void textSetorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textSetorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textSetorActionPerformed

    private void limparCampos() {
        textID.setText("");
        textCPF.setText("");
        textData_nascimento.setText("");
        textNome.setText("");
        textSetor.setSelectedItem("");
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ID;
    private javax.swing.JTable Tabela_funcionarios;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbCancelar;
    private javax.swing.JButton jbEditar;
    private javax.swing.JButton jbExcluir;
    private javax.swing.JButton jbLimpar;
    private javax.swing.JButton jbNovo;
    private javax.swing.JButton jbPesquisar;
    private javax.swing.JButton jbSalvar;
    private javax.swing.JFormattedTextField textCPF;
    private javax.swing.JFormattedTextField textData_nascimento;
    private javax.swing.JTextField textID;
    private javax.swing.JFormattedTextField textNome;
    private javax.swing.JComboBox<String> textSetor;
    // End of variables declaration//GEN-END:variables
}
